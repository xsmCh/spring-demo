# 应用端口
server.port=8080

# 数据源(主要是验证type,driver-class-name,url可用)
#spring.datasource.type=com.zaxxer.hikari.HikariDataSource
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/store_db?useUnicode=true
#spring.datasource.username=root
#spring.datasource.password=root

# 设置mybatis
# 设置mybatis参数

# 设置打印日志
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
logging.level.com.baomidou.mybatisplus.core=DEBUG

#sharding-jdbc分片规则
# 打开sql输出日志
spring.shardingsphere.props.sql.show = true

#配置数据源 m0,m1,m2,s0,s1,s2
spring.shardingsphere.datasource.names = m0,m1,m2

spring.shardingsphere.datasource.m0.type = com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.m0.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m0.jdbc-url = jdbc:mysql://localhost:3306/store_db?useUnicode=true
spring.shardingsphere.datasource.m0.username = root
spring.shardingsphere.datasource.m0.password = root

spring.shardingsphere.datasource.m1.type = com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.m1.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.jdbc-url = jdbc:mysql://localhost:3306/product_db_1?useUnicode=true
spring.shardingsphere.datasource.m1.username = root
spring.shardingsphere.datasource.m1.password = root

spring.shardingsphere.datasource.m2.type = com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.m2.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m2.jdbc-url = jdbc:mysql://localhost:3306/product_db_2?useUnicode=true
spring.shardingsphere.datasource.m2.username = root
spring.shardingsphere.datasource.m2.password = root

#逻辑表配置(可以不设置分库策略,但一定要设置分表策略)
# 默认分库策略
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=store_info_id
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=database_inline

# store_info分表策略(表1)
spring.shardingsphere.rules.sharding.tables.store_info.actual-data-nodes = m$->{0}.store_info
spring.shardingsphere.rules.sharding.tables.store_info.table-strategy.standard.sharding-column=id
spring.shardingsphere.rules.sharding.tables.store_info.table-strategy.standard.sharding-algorithm-name=store_info_inline
# product_info分表策略(表2)
spring.shardingsphere.rules.sharding.tables.product_info.actual-data-nodes = m$->{1..2}.product_info_$->{1..2}
spring.shardingsphere.rules.sharding.tables.product_info.table-strategy.standard.sharding-column = product_info_id
spring.shardingsphere.rules.sharding.tables.product_info.table-strategy.standard.sharding-algorithm-name = product_info_inline
spring.shardingsphere.rules.sharding.tables.product_info.key-generate-strategy.column=product_info_id
spring.shardingsphere.rules.sharding.tables.product_info.key-generate-strategy.key-generator-name=snowflake

# product_descript分表策略(表3)
spring.shardingsphere.rules.sharding.tables.product_descript.actual-data-nodes = m$->{1..2}.product_descript_$->{1..2}
spring.shardingsphere.rules.sharding.tables.product_descript.table-strategy.standard.sharding-column = product_info_id
spring.shardingsphere.rules.sharding.tables.product_descript.table-strategy.standard.sharding-algorithm-name = product_descript_inline
spring.shardingsphere.rules.sharding.tables.product_descript.key-generate-strategy.column = id
spring.shardingsphere.rules.sharding.tables.product_descript.key-generate-strategy.key-generator-name = snowflake

# 绑定表
spring.shardingsphere.rules.sharding.binding-tables[0] = product_info,product_descript

# 广播表
spring.shardingsphere.rules.sharding.broadcast-tables = region

# 分片算法
spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.type = INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.props.algorithm-expression = m$->{store_info_id % 2 + 1}
spring.shardingsphere.rules.sharding.sharding-algorithms.store_info_inline.type = INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.store_info_inline.props.algorithm-expression = store_info
spring.shardingsphere.rules.sharding.sharding-algorithms.product_info_inline.type = INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.product_info_inline.props.algorithm-expression = product_info_$->{product_info_id % 2 + 1}
spring.shardingsphere.rules.sharding.sharding-algorithms.product_descript_inline.type = INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.product_descript_inline.props.algorithm-expression = product_descript_$->{product_info_id % 2 + 1}

# 主键算法
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.auditors.shardingKeyAudit.type=DML_SHARDING_CONDITIONS